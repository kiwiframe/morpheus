// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UsersPrivilege string

const (
	UsersPrivilegeUser      UsersPrivilege = "user"
	UsersPrivilegeModerator UsersPrivilege = "moderator"
	UsersPrivilegeAdmin     UsersPrivilege = "admin"
)

func (e *UsersPrivilege) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersPrivilege(s)
	case string:
		*e = UsersPrivilege(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersPrivilege: %T", src)
	}
	return nil
}

type NullUsersPrivilege struct {
	UsersPrivilege UsersPrivilege
	Valid          bool // Valid is true if UsersPrivilege is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersPrivilege) Scan(value interface{}) error {
	if value == nil {
		ns.UsersPrivilege, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersPrivilege.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersPrivilege) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersPrivilege), nil
}

func (e UsersPrivilege) Valid() bool {
	switch e {
	case UsersPrivilegeUser,
		UsersPrivilegeModerator,
		UsersPrivilegeAdmin:
		return true
	}
	return false
}

func AllUsersPrivilegeValues() []UsersPrivilege {
	return []UsersPrivilege{
		UsersPrivilegeUser,
		UsersPrivilegeModerator,
		UsersPrivilegeAdmin,
	}
}

type UsersRestriction string

const (
	UsersRestrictionNone          UsersRestriction = "none"
	UsersRestrictionCommunication UsersRestriction = "communication"
	UsersRestrictionFull          UsersRestriction = "full"
)

func (e *UsersRestriction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRestriction(s)
	case string:
		*e = UsersRestriction(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRestriction: %T", src)
	}
	return nil
}

type NullUsersRestriction struct {
	UsersRestriction UsersRestriction
	Valid            bool // Valid is true if UsersRestriction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRestriction) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRestriction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRestriction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRestriction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRestriction), nil
}

func (e UsersRestriction) Valid() bool {
	switch e {
	case UsersRestrictionNone,
		UsersRestrictionCommunication,
		UsersRestrictionFull:
		return true
	}
	return false
}

func AllUsersRestrictionValues() []UsersRestriction {
	return []UsersRestriction{
		UsersRestrictionNone,
		UsersRestrictionCommunication,
		UsersRestrictionFull,
	}
}

type UsersAccount struct {
	ID                uuid.UUID
	Username          string
	Email             string
	HashedPassword    string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	LastLoggedIn      sql.NullTime
	PrivilegeLevel    UsersPrivilege
	RestrictionLevel  UsersRestriction
	RestrictionExpiry sql.NullTime
	Verified          bool
}

type UsersVerification struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Token     string
	ExpiresAt time.Time
}
